import socket

import requests

from routersploit import (
    exploits,
    print_success,
    print_status,
    print_error,
    mute,
    shell
)


class Exploit(exploits.Exploit):
    """
    Exploit potential xss vulnerabilities on target hosted webpages.
    Common GET query parameters are used to insert attacker controlled code.
    If the inserted code can later be found on the target page there might be an xss vulnerability.
    """
    __info__ = {
        'name': 'XSS Tryout',
        'description': '',
        'authors': [
            'Dimitri Harkovski <s8ddhark[at]stud.uni-saarland.de>',
            'Tobias Berdin <s8toberd[at]stud.uni-saarland.de>'
        ],
        'references': [
            ''
        ],
        'devices': [
            'Multi',
        ],
    }

    target = exploits.Option('', 'Target address e.g. 192.168.1.1')  # target address

    def run(self):
        if self.check():
            print_success("Target is vulnerable")
        else:
            print_error("Target is not vulnerable")

    @mute
    def check(self):
        if self.target == '':
            return False  # target has not been set

        ports = [80, 81, 443, 8000, 8080, 44300]  # common http and https ports for IoT devices
        port = -1

        for p in ports:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            try:
                s.connect((self.target, p))
                port = p
                break
            except:
                continue

        if port == -1:
            # no open port was found
            return False

        payload = {"xyz'ghi", "xyz<ghi", 'xyz"ghi'}

        # TODO add more combinations of query parameter names and property values

        for p in payload:
            r = requests.get("http://%s:%d?data=%s" % (self.target, port, p))
            if p in r.text:
                return True

        return False
